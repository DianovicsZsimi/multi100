---
title: "Multi100: Analysis"
format: html
editor_options: 
  chunk_output_type: console
---

# Setup
## Loading packages

```{r}
library(tidyverse)
library(ggrain)
```

## Load custom functions

```{r}
source(here::here("R/utils.R"))
```

# Read data

```{r}
processed <- readr::read_csv(here::here("data/processed/multi100_processed_data.csv"))

processed <- 
  processed %>% 
    mutate(cohen_analyst = runif(509, min = 0.01, max = 0.99)) %>%
  group_by(paper_id) %>% 
  mutate(cohen_original = runif(1, min = 0.01, max = 0.99)) %>% 
  ungroup()
```

# Exploratory data analysis

There are `r processed %>% distinct(paper_id) %>% nrow()` unique papers in the dataset. The analyst id is missing in `r processed %>% filter(is.na(analyst_id)) %>% nrow()` cases.

The number of analyses per paper.

```{r}
processed %>% 
  count(paper_id) %>% 
  arrange(desc(n))
```

There are `r processed %>% filter(is.na(task1_categorisation)) %>% nrow()` responses for the survey question regarding the conclusions of the study.

# Do different analysts arrive at the same conclusions as the analyst of the original study?
## Main figure

Preparing the figure data.

```{r}
# Distinct values of task1_categorisation
distinct(processed, task1_categorisation)
# TODO: use original_paper_reference instead of paper_id
conclusions_main_data <- 
  processed %>% 
  rename(categorisation = task1_categorisation_plotting) %>% 
  mutate(
    categorisation = fct_relevel(categorisation, c("Same conclusion", "No effect/inconclusive", "Opposite effect"))
    ) %>% 
  calculate_conclusion(., paper_id, categorisation) %>% 
  mutate(
    paper_id = fct_reorder(paper_id, ifelse(categorisation == "Same conclusion", percentage, NA), .desc = FALSE, .na_rm = TRUE)
  )
```

Creating the figure.

```{r}
conclusion_main_plot <-
  plot_conclusion(conclusions_main_data, paper_id, categorisation) +
  theme(
    axis.text.y = element_text(size = 8),
    axis.text.x = element_text(size = 10),
    axis.title.x = element_text(size = 15),
    legend.justification = "left",
    legend.box = "horizontal",
    legend.position = "bottom",
    legend.text = element_text(size = 10)
    )

# Using a hacky solution to move legend under the Y axis
# conclusion_main_plot_wo_legend <- conclusion_main_plot + theme(legend.position = "none")
# legend <- cowplot::get_legend(conclusion_main_plot)
# conclusion_main_plot_w_legend <- cowplot::plot_grid(conclusion_main_plot_wo_legend, legend, nrow = 2, rel_heights = c(1, 0.05), rel_widths = c(1, 5))

ggsave(here::here("figures/conclusion_main_plot.jpg"), conclusion_main_plot, width = 9, height = 11.69, dpi = 300)

conclusion_main_plot
```

## By discipline

```{r}
conclusions_discipline_data <- 
  processed %>% 
  filter(paper_discipline %in% c("psychology", "economics", "political science")) %>% 
  mutate(paper_discipline = str_to_title(paper_discipline)) %>% 
  rename(categorisation = task1_categorisation_plotting) %>%
  mutate(
    categorisation = fct_relevel(categorisation, c("Same conclusion", "No effect/inconclusive", "Opposite effect"))
    ) %>% 
  calculate_conclusion(., paper_discipline, categorisation)

conclusions_discipline_plot <- plot_conclusion(conclusions_discipline_data, paper_discipline, categorisation, with_labels = TRUE) + 
  theme(
    legend.text = element_text(size = 8),
    legend.position = "bottom",
    legend.box = "horizontal"
    )

ggsave(here::here("figures/conclusions_discipline_plot.jpg"), conclusions_discipline_plot, dpi = 300)

conclusions_discipline_plot
```

## By expertise

```{r}
conclusions_expertise_data <- 
  processed %>% 
  rename(categorisation = task1_categorisation_plotting) %>%
  mutate(
    categorisation = fct_relevel(categorisation, c("Same conclusion", "No effect/inconclusive", "Opposite effect")),
    expertise_self_rating = as.factor(expertise_self_rating)
    ) %>% 
  calculate_conclusion(., expertise_self_rating, categorisation)

conclusions_expertise_plot <- plot_conclusion(conclusions_expertise_data, expertise_self_rating, categorisation, with_labels = TRUE) + 
  theme(
    legend.text = element_text(size = 8),
    legend.position = "bottom",
    legend.box = "horizontal"
    )

ggsave(here::here("figures/conclusions_expertise_plot.jpg"), conclusions_expertise_plot, dpi = 300)

conclusions_expertise_plot
```

## By suitability of their self-judged analysis

```{r}
conclusions_suitability_data <- 
  processed %>% 
  rename(categorisation = task1_categorisation_plotting) %>%
  mutate(
    categorisation = fct_relevel(categorisation, c("Same conclusion", "No effect/inconclusive", "Opposite effect")),
    confidence_in_approach = as.factor(confidence_in_approach)
    ) %>% 
  calculate_conclusion(., confidence_in_approach, categorisation)

conclusions_suitability_plot <- plot_conclusion(conclusions_suitability_data, confidence_in_approach, categorisation, with_labels = TRUE) + 
  theme(
    legend.text = element_text(size = 8),
    legend.position = "bottom",
    legend.box = "horizontal"
    )

ggsave(here::here("figures/conclusions_suitability_plot.jpg"), conclusions_suitability_plot, dpi = 300)

conclusions_suitability_plot
```

## By sample size

Histogram for the sample sizes.

```{r}
processed %>% 
  ggplot() + 
  # Converting to natlog because of extreme outlier
  aes(x = log(model_sample_size)) + 
  geom_histogram()
```

```{r}
processed %>% 
  rename(categorisation = task1_categorisation_plotting) %>%
  mutate(
    categorisation = fct_relevel(categorisation, c("Same conclusion", "No effect/inconclusive", "Opposite effect")),
    log_model_sample_size = log(model_sample_size)
    ) %>% 
  # filter(model_sample_size != max(model_sample_size)) %>% 
  ggplot() +
  aes(x = categorisation, y = log_model_sample_size) +
	geom_rain(rain.side = 'l') +
  labs(
    y = "Log sample size"
  ) +
  theme(
    axis.title.x = element_blank(),
    panel.background = element_blank(),
    panel.grid = element_blank(),
    axis.line = element_line()
  )
```

# Do different analysts arrive at the same effect estimates as the analyst of the original study?
## Main figure

Preparing the figure data.

```{r}
# TODO: Possible solution by adding the original effect size to the plot separately would be more concise?
effect_main_data <-
  processed %>% 
  # TODO: Simulating effect size variable replace it later
  # Also filter needs to be added as not all the studies have effect sizes?
  mutate(cohen_analyst = runif(509, min = 0.01, max = 0.99)) %>%
  group_by(paper_id) %>% 
  mutate(cohen_original = runif(1, min = 0.01, max = 0.99)) %>% 
  ungroup() %>% 
  select(paper_id, cohen_analyst, cohen_original) %>% 
  group_by(paper_id) %>%
  mutate(
    effect_size_type = paste0("re-analysis_0", row_number()),
    tolarence_region_lower = cohen_original - 0.05,
    tolarence_region_upper = cohen_original + 0.05
    ) %>% 
  # TODO: Look for a more tidy way to do this
  pivot_longer(cols = c(cohen_analyst, cohen_original),
               names_to = "name",
               values_to = "effect_size") %>%
  mutate(effect_size_type = case_when(
    name == "cohen_original" ~ "original",
    TRUE ~ effect_size_type)) %>% 
  distinct(effect_size_type, .keep_all = TRUE) %>% 
  select(-name) %>% 
  ungroup()
```

Creating the figure.

```{r}
# Shapes
shape_vector <- c(
  setNames(rep(16, 7), paste0("re-analysis_", sprintf("%02d", 1:7))),
  "original" = 15
)
# Colors
color_vector <- c(
  setNames(c("#F8766D", "#CD9600", "#7CAE00", "#00BE67", "#00BFC4", "#00A9FF", "#C77CFF"), paste0("re-analysis_", sprintf("%02d", 1:7))),
  "original" = "black"
)

effect_main_plot <-
  effect_main_data %>% 
  ggplot() +
  aes(
    y = paper_id,
    x = effect_size,
    color = effect_size_type,
    shape = effect_size_type
  ) +
  geom_point() +
  geom_pointrange(aes(xmin = tolarence_region_lower, xmax = tolarence_region_upper), data = . %>% filter(effect_size_type == "original"), show.legend = FALSE) +
  # guides(color = guide_legend(ncol = 6)) +
  scale_shape_manual(values = shape_vector) +
  scale_color_manual(values = color_vector) +
  labs(
    x = "Effect size in Cohen's d"
  ) +
  guides(color = "none", shape = "none") +
  theme(
    axis.ticks = element_blank(),
    legend.title = element_blank(),
    axis.title.y = element_blank(),
    plot.margin = margin(t = 10, r = 20, b = 10, l = 10, "pt"),
    panel.grid = element_blank(),
    panel.background = element_blank(),
    # axis.text.y=element_text(margin = margin(1, unit = "cm"), vjust =1.5)
    )

ggsave(here::here("figures/effect_main_plot.jpg"), effect_main_plot, width = 8.27, height = 11.69, dpi = 300)

effect_main_plot
```

## What percentage of the new effect sizes were beyond the tolerance region?
### By paper

```{r}
effect_region_all_data <- calculate_tolerance_region(processed, Paper_ID)
  
effect_region_all_plot <- plot_tolarence_region(effect_region_all_data, Paper_ID)

ggsave(here::here("figures/effect_region_all_plot.jpg"), effect_region_all_plot, width = 8.27, height = 11.69, dpi = 300)

effect_region_all_plot
```

### By discipline

```{r}
processed %>% 
  distinct(paper_id, .keep_all = T) %>% 
  count(paper_discipline) %>% 
  arrange(n)

effect_region_discipline_data <- 
  processed %>% 
  filter(paper_discipline %in% c("psychology", "economics", "political science")) %>% 
  mutate(paper_discipline = str_to_title(paper_discipline)) %>% 
  calculate_tolerance_region(., paper_discipline)

effect_region_discipline_plot <- plot_tolarence_region(effect_region_discipline_data, paper_discipline, with_labels = TRUE)

ggsave(here::here("figures/effect_region_discipline_plot.jpg"), effect_region_discipline_plot, dpi = 300)

effect_region_discipline_plot
```

```{r}
effect_standard_discipline_plot <-
  processed %>% 
  filter(paper_discipline %in% c("psychology", "economics", "political science")) %>% 
  mutate(paper_discipline = str_to_title(paper_discipline)) %>% 
  ggplot() +
  aes(x = paper_discipline, y = cohen_analyst) +
	geom_rain(rain.side = 'l') +
  geom_point(aes(x = paper_discipline, y = cohen_original), color = "red") +
  labs(
    y = "Cohen's d"
  ) +
  theme(
    axis.title.x = element_blank(),
    panel.background = element_blank(),
    panel.grid = element_blank(),
    axis.line = element_line()
  )

ggsave(here::here("figures/effect_standard_discipline_plot.jpg"), effect_standard_discipline_plot, dpi = 300)

effect_standard_discipline_plot
```

```{r}
processed %>% 
  distinct(paper_id, .keep_all = T) %>% 
  count(paper_discipline) %>% 
  arrange(n)

effect_robustness_discipline_data <-
  processed %>% 
  filter(paper_discipline %in% c("psychology", "economics", "political science")) %>% 
  mutate(paper_discipline = str_to_title(paper_discipline)) %>% 
  calculate_robustness(paper_discipline)

effect_robustness_discipline_plot <- plot_robustness(effect_robustness_discipline_data, paper_discipline)

ggsave(here::here("figures/effect_robustness_discipline_plot.jpg"), effect_robustness_discipline_plot, dpi = 300)

effect_robustness_discipline_plot 
```

```{r}
effect_robustness_discipline_data %>% 
  ggplot() +
  aes(x = paper_discipline, y = robustness) +
	geom_rain(rain.side = 'l') +
  # geom_point(aes(x = paper_discipline, y = cohen_original), color = "red") +
  labs(
    y = "Robustness"
  ) +
  theme(
    axis.title.x = element_blank(),
    panel.background = element_blank(),
    panel.grid = element_blank(),
    axis.line = element_line()
  )
```

### By expertise

There are `r processed %>% filter(is.na(Expertise_Self_Rating)) %>% nrow()` missing values for the expertise survey question.

```{r}
processed %>% 
  distinct(expertise_self_rating)

effect_region_expertise_data <- calculate_tolerance_region(processed, expertise_self_rating)

effect_region_expertise_plot <- plot_tolarence_region(effect_region_expertise_data, expertise_self_rating)

ggsave(here::here("figures/effect_region_expertise_plot.jpg"), effect_region_expertise_plot, dpi = 300)

effect_region_expertise_plot
```

Robustness.

```{r}
effect_robustness_expertise_data <-
  processed %>% 
  mutate(expertise_self_rating = as.factor(expertise_self_rating)) %>% 
  calculate_robustness(expertise_self_rating)

effect_robustness_expertise_plot <- plot_robustness(effect_robustness_expertise_data, expertise_self_rating, xlab = "Expertise rating")

ggsave(here::here("figures/effect_robustness_expertise_plot.jpg"), effect_robustness_expertise_plot, dpi = 300)

effect_robustness_expertise_plot 
```

### By suitability of their self-judged analysis

There are `r processed %>% filter(is.na(Confidence_in_Approach)) %>% nrow()` missing values for the suitability of the analysis survey question.

```{r}
processed %>% 
  distinct(confidence_in_approach)

effect_region_suitability_data <- calculate_tolerance_region(processed, confidence_in_approach)

effect_region_suitability_plot <- plot_tolarence_region(effect_region_suitability_data, confidence_in_approach)

ggsave(here::here("figures/effect_region_suitability_plot.jpg"), effect_region_suitability_plot, dpi = 300)

effect_region_suitability_plot
```

Robustness.

```{r}
effect_robustness_suitability_data <-
  processed %>% 
  mutate(confidence_in_approach = as.factor(confidence_in_approach)) %>% 
  calculate_robustness(confidence_in_approach)

effect_robustness_suitability_plot <- plot_robustness(effect_robustness_suitability_data, confidence_in_approach, xlab = "Confidence in analysis approach")

ggsave(here::here("figures/effect_robustness_suitability_plot.jpg"), effect_robustness_suitability_plot, dpi = 300)

effect_robustness_suitability_plot 
```

### Experimental vs observational

```{r}
# experimental_or_observational
processed %>% 
  distinct(experimental_or_observational)

effect_region_studytype_data <- 
  processed %>% 
  # empty rows are filtered
  filter(!is.na(experimental_or_observational)) %>% 
  # TODO: add this to preprocessing
  mutate(experimental_or_observational = case_when(
    experimental_or_observational == 1L ~ "Experimental", 
    experimental_or_observational == 0L ~ "Observational", 
  )) %>% 
  calculate_tolerance_region(., experimental_or_observational)

effect_region_studytype_plot <- plot_tolarence_region(effect_region_studytype_data, experimental_or_observational)

ggsave(here::here("figures/effect_region_studytype_plot.jpg"), effect_region_studytype_plot, dpi = 300)

effect_region_studytype_plot
```

### By sample size

There are `r processed %>% filter(is.na(Model_Sample_Size)) %>% nrow()` missing values for the sample size survey question.

```{r}
effect_region_samplesize_data <-
  processed %>% 
  select(model_sample_size)
```

